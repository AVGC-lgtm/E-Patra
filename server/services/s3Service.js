// services/s3Service.js - CORRECTED VERSION with proper ‡§µ‡§ø‡§∑‡§Ø format
const { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand } = require('@aws-sdk/client-s3');
const { PDFDocument, rgb } = require('pdf-lib');
const puppeteer = require('puppeteer');
const { Document, Packer, Paragraph, TextRun, Header, ImageRun, AlignmentType, HeadingLevel, Table, TableRow, TableCell } = require('docx');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Try different fetch methods based on Node.js version
let fetch;
try {
  fetch = globalThis.fetch;
  if (!fetch) {
    throw new Error('Built-in fetch not available');
  }
  console.log('Using built-in fetch');
} catch (e) {
  try {
    fetch = require('node-fetch');
    console.log('Using node-fetch');
  } catch (e2) {
    console.log('Neither built-in fetch nor node-fetch available, will use AWS SDK');
    fetch = null;
  }
}

// Configure S3 Client (using AWS SDK v3)
const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID || process.env.AWS_ACCESS_KEY,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || process.env.AWS_SECRET_KEY,
  },
});

class S3Service {
  
  // Convert image to base64
  getImageBase64(imagePath) {
    try {
      const fullPath = path.join(__dirname, '..', imagePath);
      if (fs.existsSync(fullPath)) {
        const imageBuffer = fs.readFileSync(fullPath);
        return `data:image/png;base64,${imageBuffer.toString('base64')}`;
      }
      console.warn(`Image not found at path: ${fullPath}`);
      return null;
    } catch (error) {
      console.error('Error reading image:', error);
      return null;
    }
  }

  // Get image buffer for Word documents
  getImageBuffer(imagePath) {
    try {
      const fullPath = path.join(__dirname, '..', imagePath);
      if (fs.existsSync(fullPath)) {
        return fs.readFileSync(fullPath);
      }
      console.warn(`Image not found at path: ${fullPath}`);
      return null;
    } catch (error) {
      console.error('Error reading image buffer:', error);
      return null;
    }
  }

  // CORRECTED: Determine ‡§µ‡§∞‡•ç‡§ó classification based on letterType (returns only ‡§µ‡§∞‡•ç‡§ó)
  determineVargClassification(letterType) {
    switch(letterType) {
      case 'NA':
        return '‡§¨ ‡§µ‡§∞‡•ç‡§ó';
      case 'FORWARD':
        return '‡§ï ‡§µ‡§∞‡•ç‡§ó';
      default:
        return '‡§Ö ‡§µ‡§∞‡•ç‡§ó';
    }
  }

  // CORRECTED: Determine ‡§µ‡§∞‡•ç‡§ó classification for letterhead (includes ‡§Ö‡§∞‡•ç‡§ú)
  determineVargClassificationForHeader(letterType) {
    switch(letterType) {
      case 'NA':
        return '‡§¨ ‡§µ‡§∞‡•ç‡§ó ‡§Ö‡§∞‡•ç‡§ú';
      case 'FORWARD':
        return '‡§ï ‡§µ‡§∞‡•ç‡§ó ‡§Ö‡§∞‡•ç‡§ú';
      default:
        return '‡§Ö ‡§µ‡§∞‡•ç‡§ó ‡§Ö‡§∞‡•ç‡§ú';
    }
  }

  // CORRECTED: Determine right header text based on letterType
  determineRightHeaderText(letterType) {
    switch(letterType) {
      case 'NA':
        return '‡§ï‡§ï‡•ç‡§∑ ‡•©(‡•©) ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§ï‡•ç‡§∑ ‡§≠‡•á‡§ü';
      case 'FORWARD':
        return '‡§ï‡§ï‡•ç‡§∑ ‡•©(‡•™) ‡§Æ‡§æ. ‡§ú‡§ø‡§≤‡•ç‡§π‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä/‡§∏‡•à‡§®‡§ø‡§ï';
      case 'GOVERNMENT': // ‡§Æ‡§æ. ‡§ó‡§π/‡§∂‡§æ‡§∏‡§®/‡§™‡§æ‡§≤‡§ï‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä
        return '‡§ï‡§ï‡•ç‡§∑‡•© (‡•®) ‡§Æ‡§æ. ‡§ó‡§π/‡§∂‡§æ‡§∏‡§®/‡§™‡§æ‡§≤‡§ï‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä';
      case 'POLICE_COMMISSIONER': // ‡§Æ‡§æ. ‡§™‡•ã‡§Æ‡§®‡§ø ‡§Ö‡§ú‡•á.
        return '‡§ï‡§ï‡•ç‡§∑ ‡•©(‡•ß) ‡§Æ‡§æ. ‡§™‡•ã‡§Æ‡§®‡§ø ‡§Ö‡§ú‡•á.';
      case 'LOCAL': // ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Ö‡§∞‡•ç‡§ú
        return '‡§ï‡§ï‡•ç‡§∑ ‡•©(‡•´) ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Ö‡§∞‡•ç‡§ú';
      default: // ‡§Æ‡§æ. ‡§™‡•ã‡§Æ‡§∏‡§Ç ‡§Ö‡§∞‡•ç‡§ú
        return '‡§ï‡§ï‡•ç‡§∑ ‡•©(‡•ß) ‡§Æ‡§æ. ‡§™‡•ã‡§Æ‡§∏‡§Ç ‡§Ö‡§∞‡•ç‡§ú';
    }
  }

  // ENHANCED: Extract complainant name with comprehensive patterns
  extractComplainantName(letterData) {
    console.log('üîç Extracting complainant name from:', {
      hasComplainantName: !!letterData.complainantName,
      hasSenderName: !!letterData.senderName,
      hasExtractedText: !!letterData.extractedText,
      extractedTextLength: letterData.extractedText?.length || 0
    });

    let name = '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ';
    
    // Priority 1: Use pre-extracted name if available and valid
    if (letterData.complainantName && this.isValidName(letterData.complainantName)) {
      name = letterData.complainantName;
      console.log('‚úÖ Using pre-extracted complainantName:', name);
    } 
    // Priority 2: Use sender name if available and valid
    else if (letterData.senderName && this.isValidName(letterData.senderName)) {
      name = letterData.senderName;
      console.log('‚úÖ Using pre-extracted senderName:', name);
    } 
    // Priority 3: Extract from text
    else if (letterData.extractedText) {
      console.log('üîç Attempting to extract name from text...');
      name = this.extractNameFromText(letterData.extractedText);
      console.log('üìù Extracted name from text:', name);
    }
    
    // Final cleaning and validation
    const cleanedName = this.cleanAndValidateName(name);
    console.log('‚ú® Final cleaned name:', cleanedName);
    
    return cleanedName;
  }

  // ENHANCED: Check if a name is valid
  isValidName(name) {
    if (!name || typeof name !== 'string') return false;
    
    const trimmedName = name.trim();
    
    // Invalid if too short
    if (trimmedName.length < 3) return false;
    
    // Invalid if matches default placeholders
    const invalidNames = [
      '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞', '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ', '‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡§¶‡§æ‡§∞', '‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ', 
      '‡§Ü‡§µ‡•á‡§¶‡§ï', '‡§®‡§æ‡§µ', '‡§®‡§æ‡§µ‡•á', '‡§§‡•Å‡§Æ‡§ö‡•á ‡§®‡§æ‡§µ', '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä'
    ];
    
    if (invalidNames.includes(trimmedName.toLowerCase())) return false;
    
    // Invalid if only numbers or punctuation
    if (/^[\d\s\.\,\-\:\;\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\|\\\"\'\<\>\?\/\`\~]+$/.test(trimmedName)) return false;
    
    return true;
  }

  // SIGNIFICANTLY ENHANCED: Name extraction with more comprehensive patterns
  extractNameFromText(extractedText) {
    if (!extractedText) return '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ';
    
    console.log('üìÑ Processing text for name extraction...');
    
    // Clean and normalize text
    const cleanText = extractedText
      .replace(/\s+/g, ' ')
      .replace(/\n+/g, '\n')
      .trim();
    
    console.log('üßπ Cleaned text length:', cleanText.length);
    
    // COMPREHENSIVE name extraction patterns (ordered by priority and specificity)
    const namePatterns = [
      // Pattern 1: Direct name patterns with clear markers
      { 
        pattern: /‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡§¶‡§æ‡§∞\s*[-:‚Äì‚Äî]?\s*(.+?)(?:\s*‡§∞‡§æ\.|\s*‡§µ‡§Ø|\s*‡§§‡§æ\.|\s*‡§Ø‡§æ‡§Ç‡§ö|\s*‡§Æ‡•ã‡§¨‡§æ|\s*‡§´‡•ã‡§®|\n|‡•§|,)/i, 
        type: '‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡§¶‡§æ‡§∞' 
      },
      { 
        pattern: /‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞\s*[-:‚Äì‚Äî]?\s*(.+?)(?:\s*‡§∞‡§æ\.|\s*‡§µ‡§Ø|\s*‡§§‡§æ\.|\s*‡§Ø‡§æ‡§Ç‡§ö|\s*‡§Æ‡•ã‡§¨‡§æ|\s*‡§´‡•ã‡§®|\n|‡•§|,)/i, 
        type: '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞' 
      },
      { 
        pattern: /‡§Ü‡§µ‡•á‡§¶‡§ï\s*[-:‚Äì‚Äî]?\s*(.+?)(?:\s*‡§∞‡§æ\.|\s*‡§µ‡§Ø|\s*‡§§‡§æ\.|\s*‡§Ø‡§æ‡§Ç‡§ö|\s*‡§Æ‡•ã‡§¨‡§æ|\s*‡§´‡•ã‡§®|\n|‡•§|,)/i, 
        type: '‡§Ü‡§µ‡•á‡§¶‡§ï' 
      },
      
      // Pattern 2: Formal titles
      { 
        pattern: /(?:‡§∂‡•ç‡§∞‡•Ä|‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä)\s+([^,\n‡•§]+?)(?:\s*‡§∞‡§æ\.|\s*‡§µ‡§Ø|\s*‡§§‡§æ\.|\s*‡§Ø‡§æ‡§Ç‡§ö|\s*‡§Æ‡•ã‡§¨‡§æ|\s*‡§´‡•ã‡§®|\n|‡•§|,)/i, 
        type: '‡§∂‡•ç‡§∞‡•Ä/‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä' 
      },
      
      // Pattern 3: Name field patterns
      { 
        pattern: /(?:‡§®‡§æ‡§µ|‡§®‡§æ‡§µ‡•á)\s*[-:‚Äì‚Äî]?\s*(.+?)(?:\s*‡§∞‡§æ\.|\s*‡§µ‡§Ø|\s*‡§§‡§æ\.|\s*‡§Ø‡§æ‡§Ç‡§ö|\n|‡•§|,)/i, 
        type: '‡§®‡§æ‡§µ ‡§´‡•Ä‡§≤‡•ç‡§°' 
      },
      
      // Pattern 4: Possessive patterns
      { 
        pattern: /(.+?)\s+‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ\s+(?:‡§§‡§ï‡•ç‡§∞‡§æ‡§∞|‡§Ö‡§∞‡•ç‡§ú)/i, 
        type: '‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ possessive' 
      },
      { 
        pattern: /(.+?)\s+‡§Ø‡§æ‡§Ç‡§ö‡•á\s+(?:‡§§‡§ï‡•ç‡§∞‡§æ‡§∞|‡§Ö‡§∞‡•ç‡§ú)/i, 
        type: '‡§Ø‡§æ‡§Ç‡§ö‡•á possessive' 
      },
      { 
        pattern: /(.+?)\s+‡§Ø‡§æ‡§Ç‡§®‡•Ä\s+(?:‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ|‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ)/i, 
        type: '‡§Ø‡§æ‡§Ç‡§®‡•Ä possessive' 
      },
      
      // Pattern 5: Subject line patterns
      { 
        pattern: /‡§µ‡§ø‡§∑‡§Ø.*?(.+?)\s+‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ\s+‡§§‡§ï‡•ç‡§∞‡§æ‡§∞/i, 
        type: '‡§µ‡§ø‡§∑‡§Ø line' 
      },
      
      // Pattern 6: Address-based patterns
      { 
        pattern: /^(.+?)\s+(?:‡§∞‡§æ\.|‡§∞‡§æ‡§π‡§£‡§æ‡§∞|‡§µ‡§Ø|‡§§‡§æ\.)/m, 
        type: 'Address marker' 
      },
      
      // Pattern 7: Phone/mobile based patterns
      { 
        pattern: /(.+?)(?:\s+‡§Æ‡•ã‡§¨‡§æ|\s+‡§´‡•ã‡§®)\s*(?:‡§®‡§Ç\.?)?\s*[-:‚Äì‚Äî]?\s*\d/i, 
        type: 'Phone marker' 
      },
      
      // Pattern 8: Common suffix patterns
      { 
        pattern: /(.+?)\s+(?:‡§∏‡§æ‡§π‡•á‡§¨|‡§ú‡•Ä|‡§ö‡•Ä|‡§ö‡•á|‡§ö‡•ç‡§Ø‡§æ)\s+(?:‡§§‡§ï‡•ç‡§∞‡§æ‡§∞|‡§Ö‡§∞‡•ç‡§ú)/i, 
        type: 'Suffix pattern' 
      },
      
      // Pattern 9: Line-based extraction (first meaningful line)
      { 
        pattern: /^([^‡•§\n,]+?)(?:\s*‡§∞‡§æ\.|\s*‡§µ‡§Ø|\s*‡§§‡§æ\.|\s*‡§Æ‡•ã‡§¨‡§æ|\s*‡§´‡•ã‡§®)/m, 
        type: 'First line' 
      },
      
      // Pattern 10: Complaint context
      { 
        pattern: /(?:‡§§‡§ï‡•ç‡§∞‡§æ‡§∞\s+‡§ï‡§∞‡§£‡§æ‡§∞‡•Ä\s+‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä|‡§§‡§ï‡•ç‡§∞‡§æ‡§∞\s+‡§ï‡§∞‡§£‡§æ‡§±‡•ç‡§Ø‡§æ\s+‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä‡§ö‡•á\s+‡§®‡§æ‡§µ)\s*[-:‚Äì‚Äî]?\s*(.+?)(?:\n|‡•§|,)/i, 
        type: '‡§§‡§ï‡•ç‡§∞‡§æ‡§∞ ‡§ï‡§∞‡§£‡§æ‡§∞‡•Ä ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä' 
      }
    ];
    
    let extractedName = '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ';
    let matchedPattern = 'none';
    
    // Try each pattern until we find a valid match
    for (let i = 0; i < namePatterns.length; i++) {
      const { pattern, type } = namePatterns[i];
      const match = cleanText.match(pattern);
      
      if (match) {
        // Get the first non-empty capturing group
        const nameCandidate = match[1] || match[2] || match[3];
        
        if (nameCandidate && nameCandidate.trim()) {
          const candidateName = nameCandidate.trim();
          
          // Validate the candidate
          if (this.isValidName(candidateName)) {
            extractedName = candidateName;
            matchedPattern = `${type} (Pattern ${i + 1})`;
            console.log(`‚úÖ Found name using ${matchedPattern}:`, extractedName);
            break;
          } else {
            console.log(`‚ùå Invalid candidate from ${type}:`, candidateName);
          }
        }
      }
    }

    if (matchedPattern === 'none') {
      console.log('‚ùå No valid name found using any pattern');
    }
    
    return extractedName;
  }

  // ENHANCED: Name cleaning with better validation
  cleanAndValidateName(name) {
    if (!name) return '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ';
    
    console.log('üßΩ Cleaning name:', name);
    
    // Remove common prefixes (more comprehensive)
    let cleanedName = name.replace(/^(‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡§¶‡§æ‡§∞|‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞|‡§Ü‡§µ‡•á‡§¶‡§ï|‡§∂‡•ç‡§∞‡•Ä|‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä|‡§Æ‡§æ\.|‡§°‡•â\.|‡§™‡•ç‡§∞‡§æ\.|‡§ï‡•Å‡§Æ‡§æ‡§∞‡•Ä)\s*/i, '');
    
    // Remove common suffixes and possessive forms  
    cleanedName = cleanedName.replace(/\s*(‡§Ø‡§æ‡§Ç‡§ö‡•á|‡§Ø‡§æ‡§Ç‡§ö‡•Ä|‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ|‡§Ø‡§æ‡§Ç‡§®‡§æ|‡§Ø‡§æ‡§Ç‡§®‡•Ä|‡§∏‡§æ‡§π‡•á‡§¨|‡§ú‡•Ä|‡§ö‡•Ä|‡§ö‡•á|‡§ö‡•ç‡§Ø‡§æ|‡§ö‡§æ|‡§¨‡§æ‡§¨‡§§|‡§µ‡§ø‡§∑‡§Ø‡•Ä|‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§æ‡§§|‡§Ö‡§®‡•Å‡§∑‡§Ç‡§ó‡§æ‡§®‡•á).*$/i, '');
    
    // Remove punctuation and clean up
    cleanedName = cleanedName.replace(/[,\.\-‚Äì‚Äî:;]/g, '').trim();
    cleanedName = cleanedName.replace(/\s+/g, ' ');
    
    // Remove unwanted words (more comprehensive)
    const unwantedWords = [
      '‡§§‡•Å‡§Æ‡§ö‡•á', '‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ', '‡§Ü‡§™‡§≤‡•á', '‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ', '‡§®‡§æ‡§µ', '‡§®‡§æ‡§µ‡•á', '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä', '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡•Ä‡§ö‡•á',
      '‡§∞‡§æ', '‡§µ‡§Ø', '‡§§‡§æ', '‡§Æ‡•ã‡§¨‡§æ', '‡§´‡•ã‡§®', '‡§Ø‡•á‡§•‡•á', '‡§Ø‡•á‡§•‡•Ä‡§≤', '‡§§‡§ï‡•ç‡§∞‡§æ‡§∞', '‡§ï‡§°‡•á', '‡§ï‡§°‡•Ç‡§®',
      '‡§Ö‡§∞‡•ç‡§ú', '‡§¨‡§æ‡§¨‡§§', '‡§µ‡§ø‡§∑‡§Ø‡•Ä', '‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§æ‡§§', '‡§Ö‡§®‡•Å‡§∑‡§Ç‡§ó‡§æ‡§®‡•á', '‡§ï‡§∞‡§£‡§æ‡§∞‡•Ä', '‡§ï‡§∞‡§£‡§æ‡§±‡•ç‡§Ø‡§æ'
    ];
    
    for (const word of unwantedWords) {
      cleanedName = cleanedName.replace(new RegExp(`\\b${word}\\b`, 'gi'), '').trim();
      cleanedName = cleanedName.replace(/\s+/g, ' '); // Clean up extra spaces
    }
    
    // Final cleanup
    cleanedName = cleanedName.replace(/\s+/g, ' ').trim();
    
    // Final validation
    if (!cleanedName || 
        cleanedName.length < 2 || 
        cleanedName === '‡§§‡•Å‡§Æ‡§ö‡•á ‡§®‡§æ‡§µ' || 
        cleanedName === '‡§®‡§æ‡§µ' ||
        cleanedName.match(/^\d+$/) || // Only numbers
        cleanedName.match(/^[,\.\-‚Äì‚Äî:;\s]+$/) // Only punctuation
       ) {
      console.log('‚ùå Name failed final validation:', cleanedName);
      return '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ';
    }
    
    // Truncate if too long
    if (cleanedName.length > 50) {
      cleanedName = cleanedName.substring(0, 50) + '...';
    }
    
    console.log('‚ú® Final cleaned name:', cleanedName);
    return cleanedName;
  }

  // Convert application type to Marathi
  convertApplicationTypeToMarathi(letterType) {
    switch(letterType) {
      case 'NAR':
        return 'NAR';
      case 'NA':
        return 'NA';
      case 'FORWARD':
        return '‡§™‡•Å‡§¢‡•á ‡§™‡§æ‡§†‡§µ‡§£‡•á';
      case 'ACKNOWLEDGMENT':
        return '‡§™‡•ã‡§ö ‡§™‡§æ‡§µ‡§§‡•Ä';
      default:
        return letterType || 'NAR';
    }
  }

  // CORRECTED: Generate subject line based on ‡§µ‡§∞‡•ç‡§ó classification only
  generateSubjectLine(letterType, complainantName = null, letterData = null) {
    // Get ‡§µ‡§∞‡•ç‡§ó classification
    const vargClassification = this.determineVargClassification(letterType);
    
    // Generate subject based on ‡§µ‡§∞‡•ç‡§ó and letterType only
    switch(letterType) {
      case 'NAR':
      case 'ACKNOWLEDGMENT':
        return `${vargClassification} ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§æ‡§¨‡§æ‡§¨‡§§ (NAR)`;
      case 'NA':
        return `${vargClassification} ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§æ‡§¨‡§æ‡§¨‡§§ (NA)`;
      case 'FORWARD':
        return `${vargClassification} ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§æ‡§¨‡§æ‡§¨‡§§ (NAR)`; // Can be (NA) based on requirement
      default:
        return `${vargClassification} ‡§§‡§ï‡•ç‡§∞‡§æ‡§∞‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§æ‡§¨‡§æ‡§¨‡§§ (NAR)`;
    }
  }

  // Generate table data for covering letter
  generateTableData(letterData, complainantName) {
    const currentYear = new Date().getFullYear();
    const marathiAppType = this.convertApplicationTypeToMarathi(letterData.letterType);
    
    return [
      {
        applicationNumber: `${letterData.letterNumber}/${currentYear}`,
        applicationType: marathiAppType,
        applicantName: complainantName,
        outwardNumber: `/${currentYear}`
      },
      {
        applicationNumber: `/${currentYear}`,
        applicationType: '',
        applicantName: complainantName,
        outwardNumber: `/${currentYear}`
      },
      {
        applicationNumber: '',
        applicationType: '',
        applicantName: complainantName,
        outwardNumber: `/${currentYear}`
      }
    ];
  }

  // Generate Word document with logos and proper formatting
  async generateWordDocument(letterContent, letterData) {
    try {
      console.log('üìù Generating Word document with logos...');
      
      const currentYear = new Date().getFullYear();
      const today = new Date();
      const formattedDate = `${today.getDate().toString().padStart(2, '0')} / ${(today.getMonth() + 1).toString().padStart(2, '0')} / ${today.getFullYear()}`;
      
      const complainantName = this.extractComplainantName(letterData);
      const subjectLine = this.generateSubjectLine(letterData.letterType); // CORRECTED: No complainant name needed
      const vargClassification = this.determineVargClassificationForHeader(letterData.letterType); // CORRECTED: Use header version
      const rightHeaderText = this.determineRightHeaderText(letterData.letterType);
      
      // Get logo buffers
      const leftLogoBuffer = this.getImageBuffer('png/leftlogo.png');
      const rightLogoBuffer = this.getImageBuffer('png/rightlogo.png');
      
      const doc = new Document({
        sections: [{
          properties: {
            page: {
              margin: {
                top: 1134,
                right: 1134,
                bottom: 1134,
                left: 1134,
              },
            },
          },
          children: [
            // Letterhead with logos
            new Table({
              width: {
                size: 100,
                type: 'pct',
              },
              rows: [
                new TableRow({
                  children: [
                    // Left logo cell
                    new TableCell({
                      children: leftLogoBuffer ? [
                        new Paragraph({
                          children: [
                            new ImageRun({
                              data: leftLogoBuffer,
                              transformation: {
                                width: 60,
                                height: 60,
                              },
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ] : [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§™‡•ã‡§≤‡•Ä‡§∏",
                              bold: true,
                              size: 16,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                      width: { size: 15, type: 'pct' },
                    }),
                    // Center header cell
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞",
                              bold: true,
                              size: 32,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "(‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ)",
                              bold: true,
                              size: 24,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: `${vargClassification}                                                                                   ${rightHeaderText}`,
                              size: 20,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                      width: { size: 70, type: 'pct' },
                    }),
                    // Right logo cell
                    new TableCell({
                      children: rightLogoBuffer ? [
                        new Paragraph({
                          children: [
                            new ImageRun({
                              data: rightLogoBuffer,
                              transformation: {
                                width: 60,
                                height: 60,
                              },
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ] : [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "üèõÔ∏è",
                              size: 40,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                      width: { size: 15, type: 'pct' },
                    }),
                  ],
                }),
              ],
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Reference section
            new Paragraph({
              children: [
                new TextRun({
                  text: `‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï :- ${letterData.letterNumber}/${currentYear}, ‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ,        ‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞. - /${currentYear},        ‡§¶‡§ø. ${formattedDate}`,
                  size: 22,
                }),
              ],
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Subject line
            new Paragraph({
              children: [
                new TextRun({
                  text: `‡§µ‡§ø‡§∑‡§Ø :- ${subjectLine}`,
                  bold: true,
                  size: 26,
                }),
              ],
              alignment: AlignmentType.CENTER,
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Reference number line
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§â.‡§®‡§ø.‡§™‡•ã.‡§Ö./‡§™‡•ã.‡§®‡§ø/‡§∏.‡§™‡•ã.‡§®‡§ø./ ___________________________",
                  size: 22,
                }),
              ],
              alignment: AlignmentType.CENTER,
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Letter content
            ...letterContent.split('\n').filter(line => line.trim()).map(line => 
              new Paragraph({
                children: [
                  new TextRun({
                    text: line.trim(),
                    size: 22,
                  }),
                ],
              })
            ),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Data table
            new Table({
              width: {
                size: 100,
                type: 'pct',
              },
              rows: [
                // Header row
                new TableRow({
                  children: [
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Ö‡§∞‡•ç‡§ú ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                  ],
                }),
                // Data rows
                ...this.generateTableData(letterData, complainantName).map(rowData => 
                  new TableRow({
                    children: [
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.applicationNumber,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.applicationType,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text:"",
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.outwardNumber,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                    ],
                  })
                ),
              ],
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Closing content
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§Æ‡§æ.‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§∏‡•ã,",
                  bold: true,
                  size: 22,
                }),
              ],
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "    ‡§Ü‡§¶‡•á‡§∂ ‡§Ö‡§®‡•Å‡§∏‡§∞‡§£‡•á",
                  bold: true,
                  size: 22,
                }),
              ],
            }),
            
            // Spacing for signature
            new Paragraph({ text: "" }),
            new Paragraph({ text: "" }),
            
            // Officer signature
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä,",
                  bold: true,
                  size: 22,
                }),
              ],
              alignment: AlignmentType.RIGHT,
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞",
                  bold: true,
                  size: 22,
                }),
              ],
              alignment: AlignmentType.RIGHT,
            }),
          ],
        }],
      });

      const buffer = await Packer.toBuffer(doc);
      console.log('‚úÖ Word document generated successfully with logos');
      return buffer;

    } catch (error) {
      console.error('‚ùå Error generating Word document:', error);
      throw new Error(`Word document generation failed: ${error.message}`);
    }
  }

  // Generate Word document with signature
  async generateWordDocumentWithSignature(letterContent, letterData, signatureBase64, signerName) {
    try {
      console.log('üñäÔ∏èüìù Generating Word document with signature...');
      
      // Convert base64 signature to buffer
      let signatureBuffer = null;
      if (signatureBase64) {
        try {
          const base64Data = signatureBase64.includes(',') ? signatureBase64.split(',')[1] : signatureBase64;
          signatureBuffer = Buffer.from(base64Data, 'base64');
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not process signature for Word document:', error.message);
        }
      }

      const currentYear = new Date().getFullYear();
      const today = new Date();
      const formattedDate = `${today.getDate().toString().padStart(2, '0')} / ${(today.getMonth() + 1).toString().padStart(2, '0')} / ${today.getFullYear()}`;
      
      const complainantName = this.extractComplainantName(letterData);
      const subjectLine = this.generateSubjectLine(letterData.letterType); // CORRECTED: No complainant name needed
      const vargClassification = this.determineVargClassificationForHeader(letterData.letterType); // CORRECTED: Use header version
      const rightHeaderText = this.determineRightHeaderText(letterData.letterType);
      
      // Get logo buffers
      const leftLogoBuffer = this.getImageBuffer('png/leftlogo.png');
      const rightLogoBuffer = this.getImageBuffer('png/rightlogo.png');
      
      // Create signature elements
      const signatureElements = [];
      if (signatureBuffer) {
        try {
          signatureElements.push(
            new Paragraph({
              children: [
                new ImageRun({
                  data: signatureBuffer,
                  transformation: {
                    width: 120,
                    height: 50,
                  },
                }),
              ],
              alignment: AlignmentType.RIGHT,
            })
          );
        } catch (imgError) {
          console.warn('‚ö†Ô∏è Could not add signature image to Word document:', imgError.message);
        }
      }
      
      const doc = new Document({
        sections: [{
          properties: {
            page: {
              margin: {
                top: 1134,
                right: 1134,
                bottom: 1134,
                left: 1134,
              },
            },
          },
          children: [
            // Letterhead with logos
            new Table({
              width: {
                size: 100,
                type: 'pct',
              },
              rows: [
                new TableRow({
                  children: [
                    // Left logo cell
                    new TableCell({
                      children: leftLogoBuffer ? [
                        new Paragraph({
                          children: [
                            new ImageRun({
                              data: leftLogoBuffer,
                              transformation: {
                                width: 60,
                                height: 60,
                              },
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ] : [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§™‡•ã‡§≤‡•Ä‡§∏",
                              bold: true,
                              size: 16,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                      width: { size: 15, type: 'pct' },
                    }),
                    // Center header cell
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞",
                              bold: true,
                              size: 32,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "(‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ)",
                              bold: true,
                              size: 24,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: `${vargClassification}                                                                                   ${rightHeaderText}`,
                              size: 20,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                      width: { size: 70, type: 'pct' },
                    }),
                    // Right logo cell
                    new TableCell({
                      children: rightLogoBuffer ? [
                        new Paragraph({
                          children: [
                            new ImageRun({
                              data: rightLogoBuffer,
                              transformation: {
                                width: 60,
                                height: 60,
                              },
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ] : [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "üèõÔ∏è",
                              size: 40,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                      width: { size: 15, type: 'pct' },
                    }),
                  ],
                }),
              ],
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Reference section
            new Paragraph({
              children: [
                new TextRun({
                  text: `‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï :- ${letterData.letterNumber}/${currentYear}, ‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ,        ‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞. - /${currentYear},        ‡§¶‡§ø. ${formattedDate}`,
                  size: 22,
                }),
              ],
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Subject line
            new Paragraph({
              children: [
                new TextRun({
                  text: `‡§µ‡§ø‡§∑‡§Ø :- ${subjectLine}`,
                  bold: true,
                  size: 26,
                }),
              ],
              alignment: AlignmentType.CENTER,
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Reference number line
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§â.‡§®‡§ø.‡§™‡•ã.‡§Ö./‡§™‡•ã.‡§®‡§ø/‡§∏.‡§™‡•ã.‡§®‡§ø./ ___________________________",
                  size: 22,
                }),
              ],
              alignment: AlignmentType.CENTER,
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Letter content
            ...letterContent.split('\n').filter(line => line.trim()).map(line => 
              new Paragraph({
                children: [
                  new TextRun({
                    text: line.trim(),
                    size: 22,
                  }),
                ],
              })
            ),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Data table
            new Table({
              width: {
                size: 100,
                type: 'pct',
              },
              rows: [
                // Header row
                new TableRow({
                  children: [
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Ö‡§∞‡•ç‡§ú ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                    new TableCell({
                      children: [
                        new Paragraph({
                          children: [
                            new TextRun({
                              text: "‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï",
                              bold: true,
                              size: 22,
                            }),
                          ],
                          alignment: AlignmentType.CENTER,
                        }),
                      ],
                    }),
                  ],
                }),
                // Data rows
                ...this.generateTableData(letterData, complainantName).map(rowData => 
                  new TableRow({
                    children: [
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.applicationNumber,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.applicationType,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.applicantName,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                      new TableCell({
                        children: [
                          new Paragraph({
                            children: [
                              new TextRun({
                                text: rowData.outwardNumber,
                                size: 20,
                              }),
                            ],
                            alignment: AlignmentType.CENTER,
                          }),
                        ],
                      }),
                    ],
                  })
                ),
              ],
            }),
            
            // Spacing
            new Paragraph({ text: "" }),
            
            // Closing content
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§Æ‡§æ.‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§∏‡•ã,",
                  bold: true,
                  size: 22,
                }),
              ],
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "    ‡§Ü‡§¶‡•á‡§∂ ‡§Ö‡§®‡•Å‡§∏‡§∞‡§£‡•á",
                  bold: true,
                  size: 22,
                }),
              ],
            }),
            
            // Spacing for signature
            new Paragraph({ text: "" }),
            
            // Signature section
            ...signatureElements,
            
            // Officer signature
            new Paragraph({
              children: [
                new TextRun({
                  text: signerName || '‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä',
                  bold: true,
                  size: 22,
                }),
              ],
              alignment: AlignmentType.RIGHT,
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞",
                  bold: true,
                  size: 22,
                }),
              ],
              alignment: AlignmentType.RIGHT,
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: formattedDate,
                  size: 20,
                }),
              ],
              alignment: AlignmentType.RIGHT,
            }),
          ],
        }],
      });

      const buffer = await Packer.toBuffer(doc);
      console.log('‚úÖ Word document with signature generated successfully');
      return buffer;

    } catch (error) {
      console.error('‚ùå Error generating Word document with signature:', error);
      throw new Error(`Word document with signature generation failed: ${error.message}`);
    }
  }

  // Generate HTML with flexible signature positioning (ABOVE or BELOW officer text)
  generateSignableHTML(letterContent, letterData, signatureBase64 = null, signerName = null, signaturePosition = 'above') {
    const htmlContent = this.generateCoveringLetterHTML(letterContent, letterData);
    
    if (!signatureBase64) {
      return htmlContent;
    }

    // Create signature image element
    const signatureImg = `<img src="${signatureBase64}" alt="Signature" style="max-width: 120px; max-height: 50px; display: block;">`;

    if (signaturePosition === 'below') {
      // Place signature BELOW officer text
      const belowSignatureSection = `
        <div style="margin-top: 10px;">
          ${signatureImg}
        </div>
      `;
      
      // Insert signature after officer designation
      const officerPattern = /<p><strong>‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞<\/strong><\/p>/;
      if (officerPattern.test(htmlContent)) {
        return htmlContent.replace(officerPattern, 
          `<p><strong>‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞</strong></p>${belowSignatureSection}`
        );
      }
    } else {
      // Default: Place signature ABOVE officer text
      const aboveSignatureSection = `
        <div style="margin-bottom: 10px;">
          ${signatureImg}
        </div>
      `;

      // Insert signature before officer designation
      const signatureSectionPattern = /<div id="digital-signature-area"[^>]*>[\s\S]*?<\/div>/;
      if (signatureSectionPattern.test(htmlContent)) {
        return htmlContent.replace(signatureSectionPattern, 
          `<div id="digital-signature-area">${aboveSignatureSection}</div>`
        );
      }
    }
    
    return htmlContent;
  }

  // Generate editable HTML template with simplified signature upload
  generateEditableHTML(letterContent, letterData) {
    const today = new Date();
    const formattedDate = `${today.getDate().toString().padStart(2, '0')} / ${(today.getMonth() + 1).toString().padStart(2, '0')} / ${today.getFullYear()}`;
    
    // Get base64 images
    const leftLogo = this.getImageBase64('png/leftlogo.png');
    const rightLogo = this.getImageBase64('png/rightlogo.png');
    
    // Determine classifications
    const vargClassification = this.determineVargClassificationForHeader(letterData.letterType); // CORRECTED: Use header version
    const rightHeaderText = this.determineRightHeaderText(letterData.letterType);
    const complainantName = this.extractComplainantName(letterData);
    
    // Use corrected subject line generation
    const subjectLine = this.generateSubjectLine(letterData.letterType); // CORRECTED: No complainant name needed
    
    const tableData = this.generateTableData(letterData, complainantName);
    
    return `
<!DOCTYPE html>
<html lang="mr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡§∏‡§Ç‡§™‡§æ‡§¶‡§®‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡§µ‡•ç‡§π‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ - ${letterData.letterNumber}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Devanagari:wght@400;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Noto Sans Devanagari', Arial, sans-serif;
            font-size: 14px;
            line-height: 1.6;
            color: #000;
            background: #f5f5f5;
            padding: 20px;
        }
        
        .editor-container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .editor-header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            text-align: center;
        }
        
        .editor-actions {
            background: #34495e;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: #3498db;
            color: white;
        }
        
        .btn-success {
            background: #2ecc71;
            color: white;
        }
        
        .document-container {
            padding: 30px;
            border: 3px solid #000;
            margin: 20px;
            background: #fff;
        }
        
        .letterhead {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 15px;
            border: 2px solid #000;
        }
        
        .letterhead td {
            border: 1px solid #000;
            padding: 8px;
            vertical-align: middle;
            text-align: center;
        }
        
        .logo-cell {
            width: 80px;
            background: #f5f5f5;
        }
        
        .logo-img {
            width: 60px;
            height: 60px;
            object-fit: contain;
        }
        
        .office-title {
            font-size: 16px;
            font-weight: 700;
            margin-bottom: 3px;
        }
        
        .office-subtitle {
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .office-address {
            font-size: 10px;
            color: #333;
        }
        
        .reference-section {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            font-size: 11px;
            border-bottom: 1px solid #000;
            padding-bottom: 8px;
        }
        
        .subject-line {
            font-weight: 600;
            margin: 15px 0;
            text-align: center;
            padding: 8px;
            background: #f8f9fa;
            border: 1px solid #000;
            font-size: 13px;
        }
        
        .reference-number {
            font-size: 11px;
            margin: 8px 0;
            text-align: center;
        }
        
        .content-section {
            margin: 15px 0;
            text-align: justify;
            line-height: 1.6;
            font-size: 12px;
        }
        
        .editable-content {
            min-height: 200px;
            padding: 15px;
            border: 2px dashed #3498db;
            border-radius: 5px;
            background: #f8f9fa;
            font-family: 'Noto Sans Devanagari', Arial, sans-serif;
            font-size: 12px;
            line-height: 1.6;
            outline: none;
            resize: vertical;
            white-space: pre-wrap;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 11px;
        }
        
        .data-table th,
        .data-table td {
            border: 1px solid #000;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
        }
        
        .data-table th {
            background: #f0f0f0;
            font-weight: 600;
        }
        
        .signature-section {
            margin-top: 20px;
        }
        
        #digital-signature-area {
            margin-bottom: 10px;
        }
        
        #signatureDisplayArea {
            display: none;
            margin-bottom: 10px;
        }
        
        #uploadedSignature {
            max-width: 120px;
            max-height: 50px;
        }
        
        .signature-controls {
            margin-bottom: 10px;
        }
        
        .upload-btn, .clear-btn {
            padding: 8px 16px;
            margin: 0 5px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            font-weight: bold;
        }
        
        .upload-btn {
            background: #28a745;
            color: white;
        }
        
        .clear-btn {
            background: #dc3545;
            color: white;
        }
        
        .bold {
            font-weight: 600;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        
        .loading.active {
            display: block;
        }
        
        .success-message, .error-message {
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
            display: none;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
    <div class="editor-container">
        <!-- Editor Header -->
        <div class="editor-header">
            <h1>‡§ï‡§µ‡•ç‡§π‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ï (‡§∏‡§ø‡§Ç‡§™‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä)</h1>
            <p>Letter Number: ${letterData.letterNumber} | Type: ${letterData.letterType}</p>
        </div>
        
        <!-- Action Buttons -->
        <div class="editor-actions">
            <div class="letter-info">
                <strong>Last Updated:</strong> ${formattedDate}
            </div>
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="saveLetter()">‡§∏‡•á‡§µ‡•ç‡§π ‡§ï‡§∞‡§æ</button>
                <button class="btn btn-success" onclick="updateAndGenerate()">‡§Ö‡§™‡§°‡•á‡§ü ‡§µ PDF ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ</button>
            </div>
        </div>
        
        <!-- Success/Error Messages -->
        <div id="successMessage" class="success-message"></div>
        <div id="errorMessage" class="error-message"></div>
        
        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="loading">
            <span>‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...</span>
        </div>
        
        <!-- Document Container -->
        <div class="document-container">
            <!-- Letterhead -->
            <table class="letterhead">
                <tr>
                    <td class="logo-cell">
                        ${leftLogo ? `<img src="${leftLogo}" alt="Left Logo" class="logo-img">` : '<div style="width: 60px; height: 60px; border: 2px solid #000; display: flex; align-items: center; justify-content: center; font-size: 8px; font-weight: bold;">‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞<br>‡§™‡•ã‡§≤‡•Ä‡§∏</div>'}
                    </td>
                    <td>
                        <div class="office-title">‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞</div>
                        <div class="office-subtitle">(‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ)</div>
                        <div class="office-address">${vargClassification} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${rightHeaderText}</div>
                    </td>
                    <td class="emblem-cell">
                        ${rightLogo ? `<img src="${rightLogo}" alt="Right Logo" class="logo-img">` : '<div style="width: 60px; height: 60px; border: 2px solid #000; display: flex; align-items: center; justify-content: center; font-size: 20px;">üèõÔ∏è</div>'}
                    </td>
                </tr>
            </table>
            
            <!-- Reference Section -->
            <div class="reference-section">
                <div class="reference-left">
                    <strong>‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï :-</strong> ${letterData.letterNumber}/${new Date().getFullYear()}, ‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞. -</strong> /${new Date().getFullYear()}, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>‡§¶‡§ø. ${formattedDate}</strong>
                </div>
            </div>
            
            <!-- Subject Line -->
            <div class="subject-line">
                <strong>‡§µ‡§ø‡§∑‡§Ø :- ${subjectLine}</strong>
            </div>
            
            <!-- Reference Number -->
            <div class="reference-number">
                ‡§â.‡§®‡§ø.‡§™‡•ã.‡§Ö./‡§™‡•ã.‡§®‡§ø/‡§∏.‡§™‡•ã.‡§®‡§ø./ ___________________________
            </div>
            
            <!-- Editable Content Section -->
            <div class="content-section">
                <textarea id="letterContent" class="editable-content" placeholder="‡§Ø‡•á‡§•‡•á ‡§™‡§§‡•ç‡§∞‡§æ‡§ö‡§æ ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§æ...">${letterContent}</textarea>
            </div>
            
            <!-- Data Table -->
            <table class="data-table">
                <thead>
                    <tr>
                        <th>‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï</th>
                        <th>‡§Ö‡§∞‡•ç‡§ú ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</th>
                        <th>‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ</th>
                        <th>‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï</th>
                    </tr>
                </thead>
                <tbody>
                    ${tableData.map(row => `
                    <tr>
                        <td>${row.applicationNumber}</td>
                        <td>${row.applicationType}</td>
                        <td></td>
                        <td>${row.outwardNumber}</td>
                    </tr>
                    `).join('')}
                </tbody>
            </table>
            
            <!-- Closing Content -->
            <div class="content-section">
                <p><strong>‡§Æ‡§æ.‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§∏‡•ã,</strong></p>
                <p class="indent"><strong>‡§Ü‡§¶‡•á‡§∂ ‡§Ö‡§®‡•Å‡§∏‡§∞‡§£‡•á</strong></p>
            </div>
            
            <!-- Simple Signature Section with flexible positioning -->
            <div class="signature-section">
                <!-- Simple signature upload controls -->
                <div class="signature-controls">
                    <input type="file" id="signatureUpload" accept="image/*" style="display: none;">
                    <button type="button" onclick="document.getElementById('signatureUpload').click()" class="upload-btn">
                        ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ
                    </button>
                    <button type="button" onclick="clearSignature()" class="clear-btn">
                        ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§∏‡§æ‡§´ ‡§ï‡§∞‡§æ
                    </button>
                    <select id="signaturePosition" style="margin-left: 10px; padding: 5px;">
                        <option value="above">‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§®‡§æ‡§µ‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§µ‡§∞</option>
                        <option value="below">‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä ‡§®‡§æ‡§µ‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ñ‡§æ‡§≤‡•Ä</option>
                    </select>
                </div>
                
                <!-- Simple signature display ABOVE officer text -->
                <div id="digital-signature-area">
                    <div id="signatureDisplayArea" style="margin-bottom: 10px;">
                        <img id="uploadedSignature">
                    </div>
                </div>
                
                <p><strong>‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä,</strong></p>
                <p><strong>‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞</strong></p>
                
                <!-- Alternative signature display BELOW officer text -->
                <div id="digital-signature-area-below">
                    <div id="signatureDisplayAreaBelow" style="margin-top: 10px; display: none;">
                        <img id="uploadedSignatureBelow">
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Global variables
        const LETTER_ID = '${letterData.patraId}';
        const API_BASE_URL = '/api/covering-letters';
        
        // Show success message
        function showSuccess(message) {
            const successDiv = document.getElementById('successMessage');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            setTimeout(() => successDiv.style.display = 'none', 5000);
        }
        
        // Show error message
        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => errorDiv.style.display = 'none', 5000);
        }
        
        // Show/hide loading
        function showLoading() {
            document.getElementById('loadingIndicator').classList.add('active');
        }
        
        function hideLoading() {
            document.getElementById('loadingIndicator').classList.remove('active');
        }
        
        // Save letter content
        function saveLetter() {
            showSuccess('‡§™‡§§‡•ç‡§∞‡§æ‡§ö‡§æ ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§∏‡•á‡§µ‡•ç‡§π ‡§ù‡§æ‡§≤‡§æ!');
        }
        
        // Get simple signature data with position
        function getSignatureData() {
            const img = document.getElementById('uploadedSignature');
            const imgBelow = document.getElementById('uploadedSignatureBelow');
            const displayArea = document.getElementById('signatureDisplayArea');
            const displayAreaBelow = document.getElementById('signatureDisplayAreaBelow');
            const position = document.getElementById('signaturePosition').value;
            
            // Check which signature is active based on position
            if (position === 'below' && displayAreaBelow.style.display !== 'none' && imgBelow.src) {
                return {
                    hasSignature: true,
                    signatureBase64: imgBelow.src,
                    signerName: '‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä',
                    position: 'below'
                };
            } else if (position === 'above' && displayArea.style.display !== 'none' && img.src) {
                return {
                    hasSignature: true,
                    signatureBase64: img.src,
                    signerName: '‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä',
                    position: 'above'
                };
            }
            return { hasSignature: false };
        }
        
        // Update letter and generate PDF
        async function updateAndGenerate() {
            const content = document.getElementById('letterContent').value.trim();
            
            if (!content) {
                showError('‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§§‡•ç‡§∞‡§æ‡§ö‡§æ ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§ü‡§æ‡§ï‡§æ!');
                return;
            }
            
            showLoading();
            
            try {
                const signatureData = getSignatureData();
                const requestBody = {
                    letterContent: content,
                    status: 'UPDATED'
                };
                
                if (signatureData.hasSignature) {
                    requestBody.signatureBase64 = signatureData.signatureBase64;
                    requestBody.signerName = signatureData.signerName;
                    requestBody.signaturePosition = signatureData.position; // 'above' or 'below'
                }
                
                const response = await fetch(\`\${API_BASE_URL}/update-content/\${LETTER_ID}\`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    showSuccess('‡§ï‡§µ‡•ç‡§π‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ù‡§æ‡§≤‡•á!');
                    
                    if (result.pdfUrl) {
                        setTimeout(() => {
                            if (confirm('‡§®‡§µ‡•Ä‡§® PDF ‡§™‡§æ‡§π‡§æ‡§Ø‡§ö‡•á?')) {
                                window.open(result.pdfUrl, '_blank');
                            }
                        }, 2000);
                    }

                    if (result.wordUrl) {
                        setTimeout(() => {
                            if (confirm('Word ‡§´‡§æ‡§á‡§≤ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•Ä?')) {
                                window.open(result.wordUrl, '_blank');
                            }
                        }, 3000);
                    }
                } else {
                    showError('‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: ' + (result.error || '‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä'));
                }
            } catch (error) {
                showError('‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: ' + error.message);
            } finally {
                hideLoading();
            }
        }
        
        // Handle flexible signature upload with position selection
        function handleSignatureUpload(event) {
            const file = event.target.files[0];
            if (file) {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const position = document.getElementById('signaturePosition').value;
                        
                        if (position === 'below') {
                            // Show signature below officer text
                            const imgBelow = document.getElementById('uploadedSignatureBelow');
                            const displayAreaBelow = document.getElementById('signatureDisplayAreaBelow');
                            
                            imgBelow.src = e.target.result;
                            displayAreaBelow.style.display = 'block';
                            
                            // Hide above signature
                            document.getElementById('signatureDisplayArea').style.display = 'none';
                        } else {
                            // Show signature above officer text (default)
                            const img = document.getElementById('uploadedSignature');
                            const displayArea = document.getElementById('signatureDisplayArea');
                            
                            img.src = e.target.result;
                            displayArea.style.display = 'block';
                            
                            // Hide below signature
                            document.getElementById('signatureDisplayAreaBelow').style.display = 'none';
                        }
                    };
                    reader.readAsDataURL(file);
                } else {
                    alert('‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ï‡•ç‡§§ ‡§á‡§Æ‡•á‡§ú ‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ');
                }
            }
        }
        
        // Clear both signature positions
        function clearSignature() {
            // Clear above signature
            const img = document.getElementById('uploadedSignature');
            const displayArea = document.getElementById('signatureDisplayArea');
            img.src = '';
            displayArea.style.display = 'none';
            
            // Clear below signature
            const imgBelow = document.getElementById('uploadedSignatureBelow');
            const displayAreaBelow = document.getElementById('signatureDisplayAreaBelow');
            imgBelow.src = '';
            displayAreaBelow.style.display = 'none';
            
            // Reset file input
            document.getElementById('signatureUpload').value = '';
        }
        
        // Handle position change
        function handlePositionChange() {
            // If signature is already uploaded, move it to new position
            const currentImg = document.getElementById('uploadedSignature');
            const currentImgBelow = document.getElementById('uploadedSignatureBelow');
            
            if (currentImg.src || currentImgBelow.src) {
                const signatureData = currentImg.src || currentImgBelow.src;
                
                // Trigger re-upload with new position
                const position = document.getElementById('signaturePosition').value;
                
                if (position === 'below') {
                    document.getElementById('uploadedSignatureBelow').src = signatureData;
                    document.getElementById('signatureDisplayAreaBelow').style.display = 'block';
                    document.getElementById('signatureDisplayArea').style.display = 'none';
                } else {
                    document.getElementById('uploadedSignature').src = signatureData;
                    document.getElementById('signatureDisplayArea').style.display = 'block';
                    document.getElementById('signatureDisplayAreaBelow').style.display = 'none';
                }
            }
        }
        
        // Add event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('signatureUpload');
            if (fileInput) {
                fileInput.addEventListener('change', handleSignatureUpload);
            }
            
            // Add position change listener
            const positionSelect = document.getElementById('signaturePosition');
            if (positionSelect) {
                positionSelect.addEventListener('change', handlePositionChange);
            }
        });
    </script>
</body>
</html>
    `;
  }
  
  // Generate simplified HTML template 
  generateCoveringLetterHTML(letterContent, letterData) {
    const today = new Date();
    const formattedDate = `${today.getDate().toString().padStart(2, '0')} / ${(today.getMonth() + 1).toString().padStart(2, '0')} / ${today.getFullYear()}`;
    
    // Get base64 images
    const leftLogo = this.getImageBase64('png/leftlogo.png');
    const rightLogo = this.getImageBase64('png/rightlogo.png');
    
    // Determine classifications
    const vargClassification = this.determineVargClassificationForHeader(letterData.letterType); // CORRECTED: Use header version
    const rightHeaderText = this.determineRightHeaderText(letterData.letterType);
    const complainantName = this.extractComplainantName(letterData);
    const subjectLine = this.generateSubjectLine(letterData.letterType); // CORRECTED: No complainant name needed
    const tableData = this.generateTableData(letterData, complainantName);
    
    return `
<!DOCTYPE html>
<html lang="mr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡§ï‡§µ‡•ç‡§π‡§∞‡§ø‡§Ç‡§ó ‡§≤‡•á‡§ü‡§∞ - ${letterData.letterNumber}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Devanagari:wght@400;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Noto Sans Devanagari', Arial, sans-serif;
            font-size: 12px;
            line-height: 1.4;
            color: #000;
            background: #fff;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        
        .document-container {
            border: 3px solid #000;
            padding: 15px;
            background: #fff;
        }
        
        .letterhead {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 15px;
            border: 2px solid #000;
        }
        
        .letterhead td {
            border: 1px solid #000;
            padding: 8px;
            vertical-align: middle;
            text-align: center;
        }
        
        .logo-cell {
            width: 80px;
            background: #f5f5f5;
        }
        
        .logo-img {
            width: 60px;
            height: 60px;
            object-fit: contain;
        }
        
        .office-title {
            font-size: 16px;
            font-weight: 700;
            margin-bottom: 3px;
        }
        
        .office-subtitle {
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .office-address {
            font-size: 10px;
            color: #333;
        }
        
        .reference-section {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            font-size: 11px;
            border-bottom: 1px solid #000;
            padding-bottom: 8px;
        }
        
        .subject-line {
            font-weight: 600;
            margin: 15px 0;
            text-align: center;
            padding: 8px;
            background: #f8f9fa;
            border: 1px solid #000;
            font-size: 13px;
        }
        
        .reference-number {
            font-size: 11px;
            margin: 8px 0;
            text-align: center;
        }
        
        .content-section {
            margin: 15px 0;
            text-align: justify;
            line-height: 1.6;
            font-size: 11px;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 11px;
        }
        
        .data-table th,
        .data-table td {
            border: 1px solid #000;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
        }
        
        .data-table th {
            background: #f0f0f0;
            font-weight: 600;
        }
        
        .signature-section {
            margin-top: 20px;
        }
        
        #digital-signature-area {
            margin-bottom: 10px;
        }
        
        .bold {
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="document-container">
        <!-- Letterhead -->
        <table class="letterhead">
            <tr>
                <td class="logo-cell">
                    ${leftLogo ? `<img src="${leftLogo}" alt="Left Logo" class="logo-img">` : '<div style="width: 60px; height: 60px; border: 2px solid #000; display: flex; align-items: center; justify-content: center; font-size: 8px; font-weight: bold;">‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞<br>‡§™‡•ã‡§≤‡•Ä‡§∏</div>'}
                </td>
                <td>
                    <div class="office-title">‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞</div>
                    <div class="office-subtitle">(‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ)</div>
                    <div class="office-address">${vargClassification} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${rightHeaderText}</div>
                </td>
                <td class="emblem-cell">
                    ${rightLogo ? `<img src="${rightLogo}" alt="Right Logo" class="logo-img">` : '<div style="width: 60px; height: 60px; border: 2px solid #000; display: flex; align-items: center; justify-content: center; font-size: 20px;">üèõÔ∏è</div>'}
                </td>
            </tr>
        </table>
        
        <!-- Reference Section -->
        <div class="reference-section">
            <div class="reference-left">
                <strong>‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï :-</strong> ${letterData.letterNumber}/${new Date().getFullYear()}, ‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞. -</strong> /${new Date().getFullYear()}, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>‡§¶‡§ø. ${formattedDate}</strong>
            </div>
        </div>
        
        <!-- Subject Line -->
        <div class="subject-line">
            <strong>‡§µ‡§ø‡§∑‡§Ø :- ${subjectLine}</strong>
        </div>
        
        <!-- Reference Number -->
        <div class="reference-number">
            ‡§â.‡§®‡§ø.‡§™‡•ã.‡§Ö./‡§™‡•ã.‡§®‡§ø/‡§∏.‡§™‡•ã.‡§®‡§ø./ ___________________________
        </div>
        
        <!-- Content Section -->
        <div class="content-section">
            <pre style="font-family: 'Noto Sans Devanagari', Arial, sans-serif; white-space: pre-wrap; word-wrap: break-word; margin: 0;">${letterContent}</pre>
        </div>
        
        <!-- Data Table -->
        <table class="data-table">
            <thead>
                <tr>
                    <th>‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï</th>
                    <th>‡§Ö‡§∞‡•ç‡§ú ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</th>
                    <th>‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ</th>
                    <th>‡§ú‡§æ‡§µ‡§ï ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï</th>
                </tr>
            </thead>
            <tbody>
                ${tableData.map(row => `
                <tr>
                    <td>${row.applicationNumber}</td>
                    <td>${row.applicationType}</td>
                    <td></td>
                    <td>${row.outwardNumber}</td>
                </tr>
                `).join('')}
            </tbody>
        </table>
        
        <!-- Closing Content -->
        <div class="content-section">
            <p><strong>‡§Æ‡§æ.‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§∏‡•ã,</strong></p>
            <p style="margin-left: 20px;"><strong>‡§Ü‡§¶‡•á‡§∂ ‡§Ö‡§®‡•Å‡§∏‡§∞‡§£‡•á</strong></p>
        </div>
        
        <!-- Simple Signature Section -->
        <div class="signature-section">
            <!-- Option 1: Signature ABOVE officer text -->
            <div id="digital-signature-area">
                <!-- Simple signature will be inserted here ABOVE officer designation -->
            </div>
            <p><strong>‡§Ö‡§∞‡•ç‡§ú ‡§∂‡§æ‡§ñ‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä,</strong></p>
            <p><strong>‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§Ö‡§ß‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø, ‡§Ö‡§π‡§ø‡§≤‡•ç‡§Ø‡§æ‡§®‡§ó‡§∞</strong></p>
        </div>
        
    </div>
</body>
</html>
    `;
  }
  
  // Enhanced method to generate covering letter with Word document support
  async generateAndUploadSignedCoveringLetter(letterContent, letterData, signatureBase64 = null, signerName = null) {
    try {
      console.log('üìÑ Generating covering letter with Word document and signature support...', {
        hasSignature: !!signatureBase64,
        signerName,
        letterNumber: letterData.letterNumber
      });

      // Generate HTML with simple signature if provided
      const htmlContent = this.generateSignableHTML(letterContent, letterData, signatureBase64, signerName);
      
      // Generate PDF using Puppeteer
      const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
      });
      
      const page = await browser.newPage();
      await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
      
      const pdfBuffer = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '15mm',
          bottom: '15mm',
          left: '15mm',
          right: '15mm'
        }
      });
      
      await browser.close();
      
      // Generate Word document with/without signature
      let wordBuffer;
      if (signatureBase64) {
        wordBuffer = await this.generateWordDocumentWithSignature(letterContent, letterData, signatureBase64, signerName);
      } else {
        wordBuffer = await this.generateWordDocument(letterContent, letterData);
      }
      
      // Determine filename suffix
      const suffix = signatureBase64 ? '-signed' : '';
      const timestamp = Date.now();
      
      // Upload PDF to S3
      const pdfFileName = `covering-letters/${letterData.letterNumber}${suffix}-${timestamp}.pdf`;
      const pdfCommand = new PutObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: pdfFileName,
        Body: pdfBuffer,
        ContentType: 'application/pdf',
      });
      
      await s3Client.send(pdfCommand);
      
      // Upload HTML to S3
      const htmlFileName = `covering-letters/${letterData.letterNumber}${suffix}-${timestamp}.html`;
      const htmlCommand = new PutObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: htmlFileName,
        Body: htmlContent,
        ContentType: 'text/html',
      });
      
      await s3Client.send(htmlCommand);
      
      // Upload Word document to S3
      const wordFileName = `covering-letters/${letterData.letterNumber}${suffix}-${timestamp}.docx`;
      const wordCommand = new PutObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: wordFileName,
        Body: wordBuffer,
        ContentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      });
      
      await s3Client.send(wordCommand);
      
      // Generate URLs
      const pdfUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${pdfFileName}`;
      const htmlUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${htmlFileName}`;
      const wordUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${wordFileName}`;
      
      console.log('‚úÖ Covering letter generated and uploaded successfully with Word document:', {
        pdfUrl,
        htmlUrl,
        wordUrl,
        signed: !!signatureBase64
      });
      
      return {
        pdfUrl: pdfUrl,
        htmlUrl: htmlUrl,
        wordUrl: wordUrl,
        fileName: pdfFileName,
        htmlFileName: htmlFileName,
        wordFileName: wordFileName,
        signed: !!signatureBase64,
        signedBy: signerName,
        signedAt: signatureBase64 ? new Date() : null
      };
      
    } catch (error) {
      console.error('‚ùå Error generating and uploading covering letter:', error);
      throw new Error(`Failed to generate and upload covering letter: ${error.message}`);
    }
  }
  
  // Generate PDF and upload to S3 with Word document support
  async generateAndUploadCoveringLetter(letterContent, letterData) {
    try {
      console.log('üìÑ Generating covering letter with Word document support...', {
        letterNumber: letterData.letterNumber,
        letterType: letterData.letterType
      });

      // Generate HTML
      const htmlContent = this.generateCoveringLetterHTML(letterContent, letterData);
      
      // Generate PDF using Puppeteer
      const browser = await puppeteer.launch({
        headless: true,
        args: [
          '--no-sandbox', 
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-web-security'
        ]
      });
      
      try {
        const page = await browser.newPage();
        
        // Set page content with timeout
        await page.setContent(htmlContent, { 
          waitUntil: 'networkidle0',
          timeout: 30000
        });
        
        const pdfBuffer = await page.pdf({
          format: 'A4',
          printBackground: true,
          margin: {
            top: '15mm',
            bottom: '15mm',
            left: '15mm',
            right: '15mm'
          }
        });
        
        await browser.close();
        
        console.log('‚úÖ PDF generated successfully, size:', pdfBuffer.length, 'bytes');
        
        // Generate Word document
        const wordBuffer = await this.generateWordDocument(letterContent, letterData);
        console.log('‚úÖ Word document generated successfully, size:', wordBuffer.length, 'bytes');
        
        const timestamp = Date.now();
        
        // Upload PDF to S3
        const pdfFileName = `covering-letters/${letterData.letterNumber}-${timestamp}.pdf`;
        const pdfCommand = new PutObjectCommand({
          Bucket: process.env.AWS_BUCKET_NAME,
          Key: pdfFileName,
          Body: pdfBuffer,
          ContentType: 'application/pdf',
        });
        
        await s3Client.send(pdfCommand);
        console.log('‚úÖ PDF uploaded to S3:', pdfFileName);
        
        // Upload HTML to S3
        const htmlFileName = `covering-letters/${letterData.letterNumber}-${timestamp}.html`;
        const htmlCommand = new PutObjectCommand({
          Bucket: process.env.AWS_BUCKET_NAME,
          Key: htmlFileName,
          Body: htmlContent,
          ContentType: 'text/html',
        });
        
        await s3Client.send(htmlCommand);
        console.log('‚úÖ HTML uploaded to S3:', htmlFileName);
        
        // Upload Word document to S3
        const wordFileName = `covering-letters/${letterData.letterNumber}-${timestamp}.docx`;
        const wordCommand = new PutObjectCommand({
          Bucket: process.env.AWS_BUCKET_NAME,
          Key: wordFileName,
          Body: wordBuffer,
          ContentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        });
        
        await s3Client.send(wordCommand);
        console.log('‚úÖ Word document uploaded to S3:', wordFileName);
        
        // Generate URLs
        const pdfUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${pdfFileName}`;
        const htmlUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${htmlFileName}`;
        const wordUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${wordFileName}`;
        
        return {
          pdfUrl: pdfUrl,
          htmlUrl: htmlUrl,
          wordUrl: wordUrl, // ‚úÖ INCLUDED WORD URL
          fileName: pdfFileName,
          htmlFileName: htmlFileName,
          wordFileName: wordFileName // ‚úÖ INCLUDED WORD FILENAME
        };
        
      } catch (puppeteerError) {
        await browser.close();
        throw puppeteerError;
      }
      
    } catch (error) {
      console.error('‚ùå Error generating and uploading covering letter:', error);
      throw new Error(`Failed to generate and upload covering letter: ${error.message}`);
    }
  }
  
  // Enhanced: Upload file to S3 with better error handling
  async uploadToS3(fileBuffer, fileName, contentType) {
    try {
      console.log('‚òÅÔ∏è Uploading to S3:', { fileName, contentType, size: fileBuffer.length });
      
      // Validate inputs
      if (!fileBuffer || fileBuffer.length === 0) {
        throw new Error('File buffer is empty or invalid');
      }
      
      if (!fileName || typeof fileName !== 'string') {
        throw new Error('File name is required and must be a string');
      }
      
      if (!process.env.AWS_BUCKET_NAME) {
        throw new Error('AWS_BUCKET_NAME environment variable is not set');
      }
      
      const command = new PutObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: `covering-letters/${fileName}`,
        Body: fileBuffer,
        ContentType: contentType || 'application/octet-stream',
      });
      
      await s3Client.send(command);
      
      // Generate URL manually
      const fileUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/covering-letters/${fileName}`;
      
      console.log('‚úÖ File uploaded successfully to S3:', fileUrl);
      return fileUrl;
      
    } catch (error) {
      console.error('‚ùå Error uploading to S3:', error);
      throw new Error(`Failed to upload to S3: ${error.message}`);
    }
  }

  // Download file from S3
  async downloadFileFromS3(key) {
    try {
      console.log('‚òÅÔ∏è Downloading from S3, key:', key);
      
      const command = new GetObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: key,
      });

      const response = await s3Client.send(command);
      
      // Convert the readable stream to buffer
      const chunks = [];
      for await (const chunk of response.Body) {
        chunks.push(chunk);
      }
      
      const fileBuffer = Buffer.concat(chunks);
      
      console.log('‚úÖ S3 download successful, size:', fileBuffer.length, 'bytes');
      return fileBuffer;
      
    } catch (error) {
      console.error('‚ùå Error downloading file from S3:', error);
      console.error('S3 Error details:', {
        message: error.message,
        code: error.Code,
        statusCode: error.$metadata?.httpStatusCode
      });
      throw new Error(`Failed to download file from S3: ${error.message}`);
    }
  }

  // Delete file from S3
  async deleteFromS3(fileName) {
    try {
      const deleteParams = {
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: fileName,
      };

      const command = new DeleteObjectCommand(deleteParams);
      await s3Client.send(command);
      
      console.log(`üóëÔ∏è File deleted from S3: ${fileName}`);
      return true;

    } catch (error) {
      console.error('‚ùå Error deleting from S3:', error);
      throw new Error(`S3 delete failed: ${error.message}`);
    }
  }
}

module.exports = new S3Service();